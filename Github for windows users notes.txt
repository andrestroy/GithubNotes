
#Basic steps to use github on the browser

#1 Create repository
#2 submit a new issue
#3 create a branch (branch early, branch often, like checkin early, check in often)
#4 perform a change into the branch
#5 commit the change into the new branch (do not forget to add a title con the commit)
#6 create a pull request
--> there are tree magic words that goes into the pull request comment: fixes, resolves and closes next to the <#number of the issue>
--> once the branch is merged, the issue is automatically fixed, closed or resolved.
#7 merge new branch to the master branch.


# -------------------- Git console commands
# this cheat sheet contains a summary of the most common git commands
# https://services.github.com/kit/downloads/github-git-cheat-sheet.pdf
# create a git repository
> mkdir <FOLDERNAME>
> cd <FOLDERNAME>
> git init
#list all the branches
> git branch
#create a new branch
> git branch <branch-name>
# move to a branch
> git checkout <brach-name>
#git stash saves the changes that are not on stage 
> git stash
#git add is used to add the content of the catapult
> git add <filename> <filename>

#git "add" is used to add the files and changes into the staging area
# all inside the staging area is like the precommit area.
> git add
# to include all the files changed into the staging area it is just needed to type:
> git add .
# use git commit -am to /add and /message in one command.
> git commit -am "commit message"

# in order to update the changes for a commit without adding a new commit for a trivial change update the commit using 
# the amend parameter
> git commit -a --amend

##### GIT IGNORE
# in order to exclude an specific file, add it to the global exclusions
> git config --global --edit
excludesfile = E:\\My Documents\\GitHub\\git_global_ignore.txt

#GIT log
#show in a brief summary
> git log --oneline

#most recent commit
>git log -1

#show in full detail the commits
> git log -p
> git log -2 -p

# show log with the number of changes but not showing the entire changes.
> git log --stat    

#pull from another branch, in this case the . means the local, otherwise the source must be specified.
> git pull . master
# pull command creates automatically a merge commit, to avoid this we can bring the changes using the fetch command
> git fetch . master
### DIFF --------------------------------------------------------------------------
# in order to get the diff you can use git diff <from> to <to>
> git diff master develop
> git diff master develop --name-only

#to show the number of lines added or updated.
>git diff master develop --stat

#TAGS
# to create a tag simple execute the following command
# the tag will point to the current commit on the branch we are located.
> git tag <tag_name>
# to show all the tags created
> git tag
# to create a tag to a specific commit
> git tag -a <tag_name> <commit-hash>
# then we can checkout the content of each tag.
> git checkout <tag_name>

#stash commands
#to list the stash stack
> git stash list
# to show the element at specific index e.g. index = 0
> git stash show stash@"{0}"
#show the changes of the stash
> git stash show stash@"{0}" -p
# to delete an element from the stash
> git stash drop stash@"{0}"
# clear the entire stash
> git stash clear
# save a stash with an especific name
> git stash save "<stash-name>"

# there are two ways to get the stash changes
# 1. using the apply keyword, then stash is not removed from the stack
> git stash apply stash@"{0}"
# 2 using the pop keyword the stash is restored and then removed from the stack
>git stash pop stash@"{0}"